rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || resource.data.role == 'admin');
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }
    
    // Documents collection rules
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.sharedWithEmail == request.auth.token.email
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Shares collection rules
    match /shares/{shareId} {
      allow read: if isAuthenticated() && (
        resource.data.sharedByUserId == request.auth.uid ||
        resource.data.sharedWithEmail == request.auth.token.email
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.sharedByUserId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.sharedByUserId == request.auth.uid;
    }
    
    // Activities collection rules
    match /activities/{activityId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
